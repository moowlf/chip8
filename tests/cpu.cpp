
#include <Chip8.hpp>

#include <filesystem>
#include <string_view>

#include <gtest/gtest.h>

/// \brief Finds the full path for a specific filename under "chip8/tests/files"
/// \param filename A filename to be used in this file
/// \return A full path to the file or throws an exception if not found
std::filesystem::path resolveFullPath(std::string_view filename) {

  	auto path = std::filesystem::current_path();

	if (path.stem() == "chip8")
		return path / "tests/files" / filename;


	while (path.has_parent_path() && path.parent_path().has_stem()) {
		if (path.parent_path().stem() == "chip8") {
		return path.parent_path() / "tests/files" / filename;
		}

		path = path.parent_path();
	}

	throw std::runtime_error("Filename could not be found under chip8 directory.");
}

TEST(TestCPU, InsertROM) {

  Chip8 chip;
  chip.insertROM(resolveFullPath("IBM_Logo.ch8").c_str());

  std::array<uint8_t, 136> expected_memory = {
	  0x00, 0xe0, 0xa2, 0x2a, 0x60, 0x0c, 0x61, 0x08, 0xd0, 0x1f, 0x70, 0x09, 0xa2, 0x39, 0xd0, 0x1f,
	  0xa2, 0x48, 0x70, 0x08, 0xd0, 0x1f, 0x70, 0x04, 0xa2, 0x57, 0xd0, 0x1f, 0x70, 0x08, 0xa2, 0x66,
	  0xd0, 0x1f, 0x70, 0x08, 0xa2, 0x75, 0xd0, 0x1f, 0x12, 0x28, 0xff, 0x00, 0xff, 0x00, 0x3c, 0x00,
	  0x3c, 0x00, 0x3c, 0x00, 0x3c, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00, 0x38, 0x00, 0x3f,
	  0x00, 0x3f, 0x00, 0x38, 0x00, 0xff, 0x00, 0xff, 0x80, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x80, 0x00,
	  0x80, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x80, 0xf8, 0x00, 0xfc, 0x00, 0x3e, 0x00, 0x3f, 0x00, 0x3b,
	  0x00, 0x39, 0x00, 0xf8, 0x00, 0xf8, 0x03, 0x00, 0x07, 0x00, 0x0f, 0x00, 0xbf, 0x00, 0xfb, 0x00,
	  0xf3, 0x00, 0xe3, 0x00, 0x43, 0xe0, 0x00, 0xe0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
	  0x00, 0xe0, 0x00, 0xe0,
  };

  auto &memory = chip.getMemory();
  EXPECT_TRUE(std::equal(memory.begin() + 0x200,
						 memory.begin() + 0x200 + expected_memory.size(),
						 expected_memory.begin()));
}

struct TestOpcodes : public ::testing::Test {
  Chip8 chip;
};

TEST_F(TestOpcodes, Opcode_0x00E0) {

  chip.setScreenPosition(0, 0, 0xAB);
  chip.runOpcode(0x00E0);

  EXPECT_TRUE(std::all_of(chip.getScreen().getScreen().cbegin(),
						  chip.getScreen().getScreen().cend(),
						  [](bool pixel) { return !pixel; }));
}
